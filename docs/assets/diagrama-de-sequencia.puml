@startuml
actor Educator
actor Student

participant "Mobile App" as MobileApp
participant "Web App" as WebApp
participant "Server Actions" as ServerActions
participant "REST API" as RESTAPI
participant "RabbitMQ Broker" as RabbitMQ
participant "WebSocket Server" as WSS
participant "Database" as DB

== Match Creation ==

Educator -> WebApp : Navigates to /dashboard/quizzes
Educator <-- WebApp : Renders the quiz list
Educator -> WebApp : Press "Create Match" button from a specific quiz
WebApp -> ServerActions : createMatch(quizId)
ServerActions -> ServerActions : generateRandomPin()
ServerActions -> DB : INSERT INTO matches [...]
ServerActions <-- DB : Created match, including ID
WebApp <-- ServerActions : Match data, including the generated PIN
WebApp -> WebApp : Redirects to /dashboard/matches/[matchId]
Educator <-- WebApp : Renders the QR code, PIN and match control buttons

== Students Join ==

Student -> MobileApp : Opens the app
Student <-- MobileApp : Renders the PIN input screen
Student -> MobileApp : Provides match PIN or scans QR code
MobileApp -> RESTAPI : GET /matches/[PIN]
MobileApp <-- RESTAPI : Match data, including ID
Student <-- MobileApp : Renders the nickname input screen

Student -> MobileApp : Provides a nickname
MobileApp -> RESTAPI : POST /matches/[match ID]/participants
RESTAPI -> DB : INSERT INTO participants [...]
RESTAPI <-- DB : Created participant, including ID
MobileApp <-- RESTAPI : Participant data, including a secret token

MobileApp -> WSS : Connect, providing token for authentication
MobileApp <-- WSS : OK

Student <-- MobileApp : Renders a waiting screen

== Match Start or Next Question ==

Educator -> WebApp : Press "Start Match" or "Next Question" button
WebApp -> ServerActions : nextQuestion()
ServerActions -> WSS : broadcastNextQuestion(question)
Educator <-- ServerActions : Renders the question
WSS -> MobileApp : nextQuestion(question)
Student <-- MobileApp : Renders the first/next question

== Student Answers Question ==

@enduml