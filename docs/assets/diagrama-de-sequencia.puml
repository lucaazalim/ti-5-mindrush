@startuml MindRush
title Simplified diagram of MindRush's match flow

!define GET <color:blue>GET</color>
!define POST <color:green>POST</color>

actor Educator
actor Student

participant "Mobile App" as MobileApp
participant "Web App" as WebApp
participant "Server Actions" as ServerActions
participant "API" as API
participant "Pusher (WS/API)" as Pusher
participant "Database" as DB

== Match Creation ==

Educator -> WebApp : Navigates to /dashboard/quizzes
Educator <-- WebApp : Renders the quiz list
Educator -> WebApp : Press "Create Match" button from a specific quiz
WebApp -> ServerActions : createMatch(quizId)
ServerActions -> ServerActions : generateRandomPin()
ServerActions -> DB : Inserts match into matches table
ServerActions <-- DB : Created match data
WebApp <-- ServerActions : Created match data
WebApp -> WebApp : Redirects to /dashboard/matches/[matchId]
Educator <-- WebApp : Renders the match waiting page, including\nQR code, PIN, participants list and controls.

== Students Join ==

Student -> MobileApp : Opens the app
Student <-- MobileApp : Renders the PIN input screen
Student -> MobileApp : Provides match PIN or scans QR code
MobileApp -> API : <b>GET /api/matches/[match PIN]</b>

MobileApp <-- API : Match data
Student <-- MobileApp : Renders the nickname input screen

Student -> MobileApp : Provides a nickname
MobileApp -> API : <b>POST /api/matches/[match ID or PIN]/participants</b>
note right
    ""{ "nickname": John }""
end note
API -> DB : Insert participant into participants table
API <-- DB : Created participant data
API -> Pusher : Publishes <b>new-participant-event</b> to the match's channel
API -> API : Generate token with participant's ID as the payload
MobileApp <-- API : Created participant data, and the token

MobileApp -> API : <b>POST /api/pusher/participant</b>
note right
    This step generates the Pusher's auth token, that will be needed
    to establish the connection to the match's channel.

    The <b>Authorization: Bearer <participant's token></b> header must be provided.

    This is done automatically by the Pusher's SDK.
end note

API -> Pusher : Authorizes the connection to the channel
API <-- Pusher : Pusher auth token and channel data
MobileApp <-- API : Pusher auth token and channel data

MobileApp -> Pusher : Connect to the match's channel
MobileApp <-- Pusher : Connection established

Student <-- MobileApp : Renders the waiting screen

== Educator starts the match ==

Educator -> WebApp : Press "Start Match" button
WebApp -> ServerActions : startMatch(matchId)
ServerActions -> DB : Updates match
ServerActions <-- DB
ServerActions -> Pusher : Publishes <b>next-match-question-event</b> to the match's channel
WebApp <-- ServerActions : Updated match with the first question
Educator <-- WebApp : Renders the first question

== Student receives a question ==

Pusher -> MobileApp : <b>next-match-question-event</b>
MobileApp -> API : <b>GET /api/matches/current-question</b>
note right
    The <b>Authorization: Bearer <participant's token></b> header must be provided.
end note
MobileApp <-- API : Current question data with alternatives
MobileApp -> Student : Renders the question

== Student answers a question ==

Student -> MobileApp : Chooses an alternative
MobileApp -> API : <b>POST /api/matches/answers</b>
MobileApp <-- API : OK
Student <-- MobileApp : Renders waiting screen
MobileApp -> API : When countdown ends, <b>POST /api/matches/participants/me</b>
API -> DB : Fetches participant data
API <-- DB : Participant data, incluiding total and partial points
MobileApp <-- API : Participant data
MobileApp -> Student : Shows total and partial points

== Educator ends the match ==

Educator -> WebApp : Press "End Match" button
WebApp -> ServerActions : endMatch(matchId)
ServerActions -> DB : Updates match
ServerActions <-- DB
ServerActions -> Pusher : Publishes <b>match-ended-event</b> to the match's channel
WebApp <-- ServerActions : Updated match
Educator <-- WebApp : Renders the match ended screen

Pusher -> MobileApp : <b>match-ended-event</b>
MobileApp -> Student : Shows the match ended screen

@enduml