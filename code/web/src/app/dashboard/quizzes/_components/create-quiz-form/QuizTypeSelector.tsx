type QuizType = "BLANK" | "THEME_GENERATED" | "PDF_GENERATED";

interface QuizOption {
  value: QuizType;
  label: string;
  description: string;
}

interface QuizTypeSelectorProps {
  selectedType: QuizType;
  onSelect: (value: QuizType) => void;
}

const quizTypes: QuizOption[] = [
  {
    value: "BLANK",
    label: "Blank Quiz",
    description: "Create your questions manually.",
  },
  {
    value: "THEME_GENERATED",
    label: "Generated by theme",
    description: "AI will create questions from the theme.",
  },
  {
    value: "PDF_GENERATED",
    label: "Generated by PDF",
    description: "AI will create questions from the PDF.",
  },
];

export default function QuizTypeSelector({ selectedType, onSelect }: QuizTypeSelectorProps) {
  return (
    <div className="grid grid-cols-3 gap-4">
      {quizTypes.map((option) => {
        const isSelected = selectedType === option.value;
        return (
          <div
            key={option.value}
            onClick={() => onSelect(option.value)}
            className={`cursor-pointer rounded-lg border px-4 py-5 transition-all duration-200 ${
              isSelected
                ? "border-blue-500 bg-blue-100 shadow-md dark:border-blue-600 dark:bg-blue-950"
                : "border-muted hover:border-primary hover:bg-muted/50 dark:hover:bg-muted/20"
            } hover:shadow-lg`}
          >
            <p className="pb-1 text-lg font-semibold leading-tight text-foreground">
              {option.label}
            </p>
            <p className="text-sm text-muted-foreground">{option.description}</p>
          </div>
        );
      })}
    </div>
  );
}
